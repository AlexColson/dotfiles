" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
" ==========================================================
" Dependencies - Libraries/Applications outside of vim
" ==========================================================





" ==========================================================
" Shortcuts
" ==========================================================
set nocompatible              " Don't be compatible with vi
let mapleader=","             " change the leader to be a comma vs slash



" Seriously, guys. It's not like :W is bound to anything anyway.
command! W :w

" Vundle - Allows us to organize our vim plugins
" ==========================================================
" Load all vundle

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()


" ==========================================================
" Plugins included
" ==========================================================
"{
"Bundle 'vim-scripts/The-NERD-tree'
"Bundle 'tomtom/tlib_vim'
"Bundle 'MarcWeber/vim-addon-mw-utils'
"Bundle 'sjl/gundo.vim'
Plugin 'vim-scripts/a.vim'            " Switches between header and definition files (.h,.cpp)
Plugin 'ervandew/supertab'            " Perform all your vim insert mode completions with Tab
Plugin 'terryma/vim-multiple-cursors' " Allows to have multiple cursors a la  Sublime
Plugin 'flazz/vim-colorschemes' " themes for vim
Plugin 'tpope/vim-unimpaired' " mappings which are simply short normal mode aliases for commonly used ex commands
Plugin 'tpope/vim-fugitive' " git wrapper goodness
Plugin 'tpope/vim-git' " necessary for vim-fugitive for vim older than 7.2
Plugin 'tpope/vim-surround'  " mappings to easily delete, change and add such surroundings in pairs, such as quotes, parens, etc.
Plugin 'tpope/vim-abolish'
Plugin 'tpope/vim-repeat' "  enables repeating other supported plugins with the . command
Plugin 'tpope/vim-commentary' " comment stuff out
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-markdown'
Plugin 'tpope/vim-sleuth' " detect indent style (tabs vs. spaces)
Plugin 'godlygeek/tabular' " align chunk of text in tabular fation
Plugin 'kien/ctrlp.vim'
Plugin 'vim-airline/vim-airline' " fancy statusline
Plugin 'vim-airline/vim-airline-themes' " themes for vim-airline
"Bundle 'Shougo/vimshell'
"Bundle 'SirVer/ultisnips'
"Bundle 'honza/vim-snippets'
"Bundle 'Shougo/neocomplete'
"Bundle 'klen/python-mode'
"Bundle 'ivanov/vim-ipython'
"if v:version > 700
"    Bundle 'Shougo/neomru.vim'
"    Bundle 'Shougo/vimproc.vim'
"    Bundle 'Shougo/neocomplcache'
"    Bundle 'Shougo/unite.vim'
"endif
"if exists('clang')
"    Bundle 'Rip-Rip/clang_complete'
"endif
"}

" ==========================================================
" Basic Settings
" ==========================================================
"{
"H
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
nmap <C-k> [e
nmap <C-j> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-k> [egv
vmap <C-j> ]egv
vmap <C-Down> ]egv

" Buffer resizing
nmap <S-Up> :resize +1<CR>
nmap <S-Down> :resize -1<CR>
nmap <F12> :1winc< <CR>
nmap <F11> :1winc> <CR>

syntax on                     " syntax highlighing
filetype on                   " try to detect filetypes
filetype plugin indent on     " enable loading indent file for filetype
set number                    " Display line numbers
set numberwidth=1             " using only 1 column (and 1 space) while possible
set background=dark           " We are using dark background in vim
set title                     " show title in console title bar
set wildmenu                  " Menu completion in command mode on <Tab>
set wildmode=list:longest     " Tab complete the longest common match if there multiple choices.


""" Moving Around/Editing {
set hidden                  " hides buffer instead of closing them (and forcing you to undo/write)
set cursorline              " have a line indicate the cursor location
set ruler                   " show the cursor position all the time
set nostartofline           " Avoid moving cursor to BOL when jumping around
set virtualedit=block       " Let cursor move past the last char in <C-v> mode
set scrolloff=3             " Keep 3 context lines above and below the cursor
set backspace=2             " Allow backspacing over autoindent, EOL, and BOL
set showmatch               " Briefly jump to a paren once it's balanced
set nowrap                  " don't wrap text
set linebreak               " don't wrap textin the middle of a word
set autoindent              " always set autoindenting on
set smartindent             " use smart indent if there is no indent file
set tabstop=2               " <tab> inserts 4 spaces
set shiftwidth=2            " but an indent level is 2 spaces wide.
set softtabstop=2           " <BS> over an autoindent deletes both spaces.
set expandtab               " Use spaces, not tabs, for autoindent/tab key.
set shiftround              " rounds indent to a multiple of shiftwidth
set matchpairs+=<:>         " show matching <> (html mainly) as well
set foldmethod=indent       " allow us to fold on indents
set foldlevel=99            " don't fold by default
set nu
"set mouse=a                 " Automatically enable mouse
"set mousehide               " Hide mouse cursor while typing"

"}
if has("mouse_sgr")
    set ttymouse=sgr
else
    set ttymouse=xterm2
end

"""" Reading/Writing {
set noautowrite             " Never write a file unless I request it.
set noautowriteall          " NEVER.
set noautoread              " Don't automatically re-read changed files.
set modeline                " Allow vim options to be embedded in files;
set modelines=5             " they must be within the first or last 5 lines.
set ffs=unix,dos,mac        " Try recognizing dos, unix, and mac line endings.
set noswapfile
"}

"""" Messages, Info, Status {
set ls=2            " allways show status line
set vb t_vb=        " Disable all bells.  I hate ringing/flashing.
set confirm         " Y-N-C prompt if closing with unsaved changes.
set showcmd         " Show incomplete normal mode commands as I type.
set report=0        " : commands always print changed line count.
set shortmess+=a    " Use [+]/[RO]/[w] for modified/readonly/written.
set ruler           " Show some info, even without statuslines.
set laststatus=2    " Always show statusline, even if only 1 window.
set history=1000    " remember more commands and search history
set undolevels=1000 " use many muchos levels of undo

if has('statusline')
    set laststatus=2
    " Broken down into easily includeable segments
    set statusline=%<%f\                     " Filename
    set statusline+=%w%h%m%r                 " Options
    "set statusline+=%{fugitive#statusline()} " Git Hotness
    set statusline+=\ [%{&ff}/%Y]            " Filetype
    set statusline+=\ [%{getcwd()}]          " Current dir
    set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
endif
set showmode
set mouse=a
"}

"""" Always splits to the right and below
set splitright
set splitbelow

"""" Improve search display
set hlsearch
set incsearch


" Ignore these files when completing
set wildignore+=*.o,*.obj,.git,*.pyc


"""" Change update time (for augroup)
set updatetime=250

"}

" Remapping {
map <leader>c <C-w><C-q>

" <|>: Reselect visual block after indent
vnoremap < <gv
vnoremap > >gv

" Yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$

map <leader>p :set paste!<CR>


" Code folding options  {
nmap <leader>f0 :set foldlevel=0<CR>
nmap <leader>f1 :set foldlevel=1<CR>
nmap <leader>f2 :set foldlevel=2<CR>
nmap <leader>f3 :set foldlevel=3<CR>
nmap <leader>f4 :set foldlevel=4<CR>
nmap <leader>f5 :set foldlevel=5<CR>
nmap <leader>f6 :set foldlevel=6<CR>
nmap <leader>f7 :set foldlevel=7<CR>
nmap <leader>f8 :set foldlevel=8<CR>
nmap <leader>f9 :set foldlevel=9<CR>
"}
" Some helpers to edit mode
" http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>ew :e %%
map <leader>es :sp %%
map <leader>ev :vsp %%
map <leader>et :tabe %%
map <leader>q :qa<CR>

" Map <Leader>ff to display all lines with keyword under cursor
" and ask which one to jump to
nmap <Leader>ff [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>


"}
let g:solarized_termcolors=256

"""" Display {
if has("gui_running")
     colorscheme molokai
     "Remove menu bar
     set guioptions-=m
     " Remove toolbar
     set guioptions-=T
else
    colorscheme molokai
endif
"}

"""""""""""""""""""""""""""""
" Plugin specific configs
"""""""""""""""""""""""""""""
"{
" supertab
au FileType python set omnifunc=pythoncomplete#Complete
let g:SuperTabDefaultCompletionType = "context"
set completeopt=menuone,longest,preview


" Gundo {
map <leader>u :GundoToggle<CR>
"}

" NerdTree {
map <leader>e :NERDTreeToggle<CR>
"}

" Clang Complete {
if !exists('g:neocomplcache_force_omni_patterns')
    let g:neocomplcache_force_omni_patterns = {}
endif
let g:neocomplcache_force_overwrite_completefunc = 1
let g:neocomplcache_force_omni_patterns.c =
            \ '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplcache_force_omni_patterns.cpp =
            \ '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
let g:neocomplcache_force_omni_patterns.objc =
            \ '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
let g:neocomplcache_force_omni_patterns.objcpp =
            \ '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
let g:clang_complete_auto = 1
let g:clang_auto_select = 1
let g:clang_use_library = 1

let g:clang_complete_macros=1
let g:clang_library_path=$CLANG_LIB_DIR
let g:clang_snippets=1
"let g:clang_snippets_engine='ultisnips'
let g:clang_conceal_snippets=1
let g:clang_periodic_quickfix=1
let g:clang_hl_errors=1
let g:clang_user_options = ' -std=c++14 -stdlib=libstdc++ -I/apps/linux/gcc-4.9.2/include/c++/4.9.2'
"let g:clang_user_options = '-std=c++14 '
let g:clang_complete_copen = 0

let g:clang_debug= 1
"}

" Tabularize {
nmap <Leader>a& :Tabularize /&<CR>
vmap <Leader>a& :Tabularize /&<CR>
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:<CR>
vmap <Leader>a: :Tabularize /:<CR>
nmap <Leader>a:: :Tabularize /:\zs<CR>
vmap <Leader>a:: :Tabularize /:\zs<CR>
nmap <Leader>a, :Tabularize /,<CR>
vmap <Leader>a, :Tabularize /,<CR>
nmap <Leader>a,, :Tabularize /,\zs<CR>
vmap <Leader>a,, :Tabularize /,\zs<CR>
nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
" }

" highlight current word without moving
map <leader>h :let @/ = '\<'.expand('<cword>').'\>'\|set hlsearch<C-M>

" buffer switching shortcut
map <leader>, <Esc>:AV<CR>
imap <Leader>n <ESC>:IHS<CR>:A<CR>
nmap <Leader>n :IHS<CR>:A<CR>

"multiple cursors {
let g:multi_cursor_use_default_mapping=1
let g:multi_cursor_next_key='<C-d>'


" Unite {

"if v:version > 700
"    " Use the fuzzy matcher for everything
"    "call unite#filters#matcher_default#use(['matcher_fuzzy'])
"
"    " Use the rank sorter for everything
"    call unite#filters#sorter_default#use(['sorter_rank'])
"    call unite#custom#profile('source/grep', 'context' , {'no_quit': 1})
"    call unite#custom#profile('file_rec,file_rec/async,file_mru,file,buffer,grep', 'context.ignorecase' , 1 )
"    call unite#custom#profile('file_rec/async', 'context.ignorecase' , 1 )
"    let g:unite_source_grep_command='find'
"    "let g:unite_source_grep_command='fgrep'
"    let g:unite_source_grep_default_opts='. -regex ".*\.\(h\|c\|cu\|H\|C\|hh\|cc\|hpp\|cpp\|hxx\|cxx\|py\|pyx\|inl\|moc\|java\|sql\|params\)\|.*akefile\|.*cmake.*" -print0 | xargs -0 fgrep --color -n'
"    "let g:unite_source_grep_default_opts=' --exclude=".git" --exclude="build" --exclude=tags -inH'
"    " Set up some custom ignores
"    call unite#custom_source('file_rec,file_rec/async,file_mru,file,buffer,grep', 'ignore_pattern', join([ '\.git/*', '.*\.pyc' ,'build/'], '\|'))
"
"    " NEW
"    " CtrlP search
"    " replacing unite with ctrl-p
"    nnoremap <silent> <leader>r :Unite -start-insert -buffer-name=files -winheight=10 file_rec/async<cr>
"    " ============
"    autocmd FileType unite call s:unite_settings()
"
"    function! s:unite_settings()
"    let b:SuperTabDisabled=1
"    imap <buffer> <C-j>   <Plug>(unite_select_next_line)
"    imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
"    vmap <buffer> <C-j>   <Plug>(unite_select_next_line)
"    vmap <buffer> <C-k>   <Plug>(unite_select_previous_line)
"    nmap <buffer> <C-j>   <Plug>(unite_select_next_line)
"    nmap <buffer> <C-k>   <Plug>(unite_select_previous_line)
"    imap <silent><buffer><expr> <C-x> unite#do_action('split')
"    imap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
"    imap <silent><buffer><expr> <C-t> unite#do_action('tabopen')
"    nmap <buffer> <ESC> <Plug>(unite_exit)
"    set cursorline!
"
"    endfunction
"
"    " Map space to the prefix for Unite
"    nnoremap [unite] <Nop>
"    nmap <space> [unite]
"
"    "nnkoremap <silent> [unite]b :Unite buffer<CR>ka
"    nnoremap <silent> <leader>s :Unite -start-insert buffer<CR>
"    nnoremap <silent> <leader>f :Unite  -start-insert file<CR>
"    nnoremap <silent> <leader>F :Unite  -start-insert find <CR>
"    nnoremap <silent> <leader>m :Unite  -start-insert file_mru<CR>
"    "nnoremap <silent> <leader>r :Unite  -start-insert file_rec/async<CR>
"    nnoremap <silent> <leader>w :UniteWithCursorWord file_rec/async<CR>
"    nnoremap <leader>/ :Unite grep:.<cr>
"    nnoremap <leader>t :Unite -auto-preview tab<cr>
"    let g:unite_source_history_yank_enable = 1
"    nnoremap <leader>y :Unite history/yank<cr>
"
"endif
""}

" Fugitive {
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>
nnoremap <silent> <leader>gr :Gread<CR>
nnoremap <silent> <leader>gw :Gwrite<CR>
nnoremap <silent> <leader>ge :Gedit<CR>
" Mnemonic _i_nteractive
nnoremap <silent> <leader>gi :Git add -p %<CR>
nnoremap <silent> <leader>gg :SignifyToggle<CR>
"}

" CTags {
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
" " }
"

" Neocache Complete
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Set minimum syntax keyword length.
"let g:neocomplcache_min_syntax_length = 3


"}
"
" CAML Setting {
filetype plugin indent on
syntax enable

" Vim needs to be built with Python scripting support, and must be
" able to find Merlin's executable on PATH.
if executable('ocamlmerlin') && has('python')
  let s:ocamlmerlin = substitute(system('opam config var share'), '\n$', '', '''') . "/ocamlmerlin"
  execute "set rtp+=".s:ocamlmerlin."/vim"
  execute "set rtp+=".s:ocamlmerlin."/vimbufsync"
endif


" Your vimrc
let g:ocp_indent_vimfile = system("opam config var share")
let g:ocp_indent_vimfile = substitute(g:ocp_indent_vimfile, '[\r\n]*$', '', '')
let g:ocp_indent_vimfile = g:ocp_indent_vimfile . "/vim/syntax/ocp-indent.vim"

autocmd FileType ocaml exec ":source " . g:ocp_indent_vimfile

au FileType ocaml call SuperTabSetDefaultCompletionType("<c-x><c-o>")


if !exists('g:neocomplcache_force_omni_patterns')
    let g:neocomplcache_force_omni_patterns = {}
endif
let g:neocomplcache_force_omni_patterns.ocaml = '[^. *\t]\.\w*\|\h\w*|#'

"autocmd FileType ocaml source substitute(system('opam config var share'), '\n$', '', '''') . "/typerex/ocp-indent/ocp-indent.vim"
"}

function! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\v\s+$//e
    call cursor(l, c)
endfun
nmap <silent> <leader>rw :call <SID>StripTrailingWhitespaces()<CR>

"autocmd BufWritePre *.h,*.c,*.java,*.C,*.py,*.cpp :call <SID>StripTrailingWhitespaces()
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/


" Using file extension
au FileType python setl sw=2 ts=2 sts=2

" Markdown {
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']

"}

" Source the vimrc file after saving it
if has("autocmd")
  autocmd bufwritepost .vimrc source $MYVIMRC
endif
nmap <leader>v :tabedit $MYVIMRC<CR>


" Airline {
" airline options
let g:airline_powerline_fonts=1
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_theme='powerlineish'
let g:airline#extensions#tabline#enabled = 1 " enable airline tabline
let g:airline#extensions#tabline#tab_min_count = 2 " only show tabline if tabs are being used (more than 1 tab open)
let g:airline#extensions#tabline#show_buffers = 0 " do not show open buffers in tabline
let g:airline#extensions#tabline#show_splits = 0

"}
